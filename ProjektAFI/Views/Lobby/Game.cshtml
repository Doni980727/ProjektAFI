@{
    ViewBag.Title = "Spel";
    var role = ViewBag.Role as string;
    var playerName = ViewBag.PlayerName as string;
    var lobbyId = ViewBag.LobbyId as string;
}

<h1>Rita och Gissa</h1>
<p>Du är: <strong id="roleDisplay">@role</strong></p>

<div id="timer" style="font-size: 24px; font-weight: bold; margin-bottom: 10px;">
    Timer: <span id="timeLeft">--</span> sekunder
</div>

<div id="roundMessage" style="display: none; background-color: #ffffcc; padding: 10px; margin-bottom: 10px; font-weight: bold;"></div>

<canvas id="drawCanvas" width="500" height="400" style="border:1px solid black;"></canvas>

<div id="scoreBoard" style="margin-top:20px;">
    <h4>Poäng</h4>
    <ul id="scoreList"></ul>
</div>

<div id="drawWordContainer" style="display:@(role == "Ritare" ? "block" : "none");">
    <h3>Ordet du ska rita:</h3>
    <p id="wordToDraw" style="font-size: 24px; font-weight: bold; color: black;"></p>
</div>

<button onclick="clearDrawing()" style="display:@(role == "Ritare" ? "inline-block" : "none");">Rensa</button>

<input type="text" id="guessInput" placeholder="Gissa ordet" style="display:@(role != "Ritare" ? "inline-block" : "none");" />
<button id="guessButton" onclick="submitGuess()" style="display:@(role != "Ritare" ? "inline-block" : "none");">Gissa</button>

<div id="chatContainer" style="margin-top:20px; border:1px solid #ccc; height:150px; overflow-y:auto; padding:10px;">
    <h4>Chatt</h4>
    <ul id="messagesList" style="list-style:none; padding-left:0;"></ul>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.2/signalr.min.js"></script>
<script>
    let role = "@role";
    const playerName = "@playerName";
    const lobbyId = "@lobbyId";

    const canvas = document.getElementById("drawCanvas");
    const ctx = canvas.getContext("2d");
    canvas.width = 500;
    canvas.height = 400;

    const connection = new signalR.HubConnectionBuilder().withUrl("/gameHub").build();

    function drawLine(startX, startY, x, y) {
        ctx.strokeStyle = "black";
        ctx.lineWidth = 2;
        ctx.lineCap = "round";
        ctx.beginPath();
        ctx.moveTo(startX, startY);
        ctx.lineTo(x, y);
        ctx.stroke();
        ctx.closePath();
    }

    connection.on("ReceiveDrawData", function (startX, startY, x, y) {
        drawLine(startX, startY, x, y);
    });

    connection.on("ReceiveClear", function () {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    });

    connection.on("ReceiveChatMessage", function (user, message) {
        const li = document.createElement("li");
        li.textContent = user + ": " + message;
        document.getElementById("messagesList").appendChild(li);
        document.getElementById("chatContainer").scrollTop = chatContainer.scrollHeight;
    });

    connection.on("ReceiveWord", function (word) {
        if (role === "Ritare") {
            const wordElement = document.getElementById("wordToDraw");
            if (wordElement) wordElement.textContent = word;
        }
    });

    connection.on("CorrectGuess", function (guesser, word, guesserPoints, drawerPoints) {
        const msg = guesser === "(ingen)"
        ? `Tiden tog slut! Ordet var "${word}".`
        : `${guesser} gissade rätt! Ordet var "${word}".\n+${guesserPoints} till gissare, +${drawerPoints} till ritare`;

        showRoundMessage(msg);
    });


    connection.on("UpdateScores", function (scores) {
        const scoreList = document.getElementById("scoreList");
        scoreList.innerHTML = "";
        for (const player in scores) {
            const li = document.createElement("li");
            li.textContent = `${player}: ${scores[player]} poäng`;
            scoreList.appendChild(li);
        }
    });

    connection.on("StartTimer", function (seconds) {
        let timeLeft = seconds;
        const timeDisplay = document.getElementById("timeLeft");
        timeDisplay.textContent = timeLeft;

        if (window.timerInterval) clearInterval(window.timerInterval);

            window.timerInterval = setInterval(() => {
            timeLeft--;
            timeDisplay.textContent = timeLeft;
            if (timeLeft <= 0) {
            clearInterval(window.timerInterval);
            connection.invoke("TimeUp", lobbyId);
        }
    }, 1000);
    });

    connection.on("SetRole", function (newRole) {
        role = newRole;
        updateUIBasedOnRole();

        if (role === "Ritare") {
            connection.invoke("RequestWord", lobbyId);
        }
    });

    connection.start().then(() => {
    connection.invoke("JoinLobby", lobbyId, playerName);
        if (role === "Ritare") {
        connection.invoke("RequestWord", lobbyId);
        }
        updateUIBasedOnRole();
    });

    function clearDrawing() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        connection.invoke("SendClear", lobbyId);
    }

    function submitGuess() {
        const input = document.getElementById("guessInput");
        const guess = input.value.trim();
        if (guess === "") return;

        connection.invoke("SendGuess", lobbyId, playerName, guess)
        .catch(err => console.error(err.toString()));

        input.value = "";
    }

    function showRoundMessage(message) {
        const div = document.getElementById("roundMessage");
        div.textContent = message;
        div.style.display = "block";

        setTimeout(() => {
            div.style.display = "none";
        }, 5000); // Dölj efter 5 sekunder
    }


    function updateUIBasedOnRole() {
        // Uppdatera rolltext
        const roleDisplay = document.getElementById("roleDisplay");
        if (roleDisplay) {
            roleDisplay.textContent = role;
        }

        // Visa/dölj ord
        const wordContainer = document.getElementById("drawWordContainer");
        if (wordContainer) wordContainer.style.display = role === "Ritare" ? "block" : "none";

        // Visa/dölj rensa-knapp
        const clearButton = document.querySelector("button[onclick='clearDrawing()']");
        if (clearButton) clearButton.style.display = role === "Ritare" ? "inline-block" : "none";

        // Visa/dölj gissning
        const guessInput = document.getElementById("guessInput");
        const guessButton = document.getElementById("guessButton");
        if (guessInput) guessInput.style.display = role === "Gissare" ? "inline-block" : "none";
        if (guessButton) guessButton.style.display = role === "Gissare" ? "inline-block" : "none";
    }

    // Rita bara om du är ritare
    canvas.addEventListener("mousedown", e => {
        if (role !== "Ritare") return;
        isDrawing = true;
        const rect = canvas.getBoundingClientRect();
        lastX = e.clientX - rect.left;
        lastY = e.clientY - rect.top;
    });

    canvas.addEventListener("mouseup", () => isDrawing = false);
    canvas.addEventListener("mouseleave", () => isDrawing = false);

    canvas.addEventListener("mousemove", e => {
        if (!isDrawing || role !== "Ritare") return;
        const rect = canvas.getBoundingClientRect();
        const currentX = e.clientX - rect.left;
        const currentY = e.clientY - rect.top;
        drawLine(lastX, lastY, currentX, currentY);
        connection.invoke("SendDrawData", lobbyId, lastX, lastY, currentX, currentY);
        lastX = currentX;
    l   astY = currentY;
    });

    let isDrawing = false;
    let lastX = 0;
    let lastY = 0;

    document.getElementById("guessInput")?.addEventListener("keydown", function (e) {
        if (e.key === "Enter") {
            submitGuess();
        }
    });

</script>
